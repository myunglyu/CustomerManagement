@model WooriOptical.Models.Order

@{
    ViewData["Title"] = "Order Details";
}

<div class="container" id="order-root">
    <div>
        <h4 id="store-info">
        </h4>
    </div>
    <h2>Order Details</h2>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4>Order #@Model.OrderId.ToString().Substring(0, 8)</h4>
            <div>
                <button class="btn btn-primary btn-sm" onclick="window.print()">Print Order</button>
                @if (Model.PayoffStatus == "Partial" || Model.PayoffStatus == "Pending")
                {
                    <a asp-action="EditOrder" asp-route-id="@Model.OrderId" class="btn btn-warning btn-sm">Edit Order</a>
                }
                <a asp-action="Details" asp-route-id="@Model.CustomerId" class="btn btn-secondary btn-sm">Back to Customer</a>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Order Date:</strong> @Model.OrderDate.ToString("yyyy-MM-dd")</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Payment Status:</strong> 
                        @if (Model.PayoffStatus == "Paid")
                        {
                            <span class="badge bg-success">Paid</span>
                        }
                        else if (Model.PayoffStatus == "Partial")
                        {
                            <span class="badge bg-warning">Partial</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Pending</span>
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- Customer Information -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Customer Information</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Name:</strong> @ViewBag.Customer.Name</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Phone:</strong> @ViewBag.Customer.Phone</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Prescription Details -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Prescription Details</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col">
                @if (ViewBag.Prescription != null)
                {
                    var p = (WooriOptical.Models.Prescription)ViewBag.Prescription;
                    <p><strong>Date Issued:</strong> @p.DateIssued.ToString("yyyy-MM-dd")</p>
                    <p><strong>Right Eye (OD):</strong> SPH: @p.RSphere.ToString("F2"), CYL: @p.RCylinder.ToString("F2"), AXIS: @p.RAxis</p>
                    <p><strong>Left Eye (OS):</strong> SPH: @p.LSphere.ToString("F2"), CYL: @p.LCylinder.ToString("F2"), AXIS: @p.LAxis</p>
                    <p><strong>PD:</strong> @p.PD.ToString("F1")</p>
                    <p><strong>Height:</strong> @Model.Height mm</p>
                    <p><strong>Notes:</strong> @p.Notes </p>
                }
                else
                {
                    <p class="text-muted">No prescription found for this order.</p>
                }
                </div>
            </div>
        </div>
    </div>

    <!-- Frame Details -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Frame Details</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <p><strong>Frame:</strong> @Model.Frame</p>
                </div>
                <div class="col-md-4">
                    <p><strong>Price:</strong> $@Model.FramePrice</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Lens Details -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Lens Details</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <p><strong>Lens:</strong> @Model.Lens</p>
                </div>
                <div class="col-md-4">
                    <p><strong>Price:</strong> $@Model.LensPrice</p>
                </div>
            </div>
        </div>
    </div>


    <!-- Pricing Summary -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Pricing Summary</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <table class="table table-borderless">
                        <tr>
                            <td><strong>Total Amount:</strong></td>
                            <td>$@Model.TotalAmount.ToString("F2")</td>
                        </tr>
                        @if (!string.IsNullOrEmpty(Model.Discount))
                        {
                            <tr>
                                <td><strong>Discount:</strong></td>
                                <td>@Model.Discount</td>
                            </tr>
                        }
                        <tr class="table-active">
                            <td><strong>Final Amount:</strong></td>
                            <td><strong>$@Model.FinalAmount</strong></td>
                        </tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <table class="table table-borderless">
                        @if (!string.IsNullOrEmpty(Model.Deposit))
                        {
                            <tr>
                                <td><strong>Deposit Paid:</strong></td>
                                <td>$@Model.Deposit</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Balance))
                        {
                            <tr class="@(Model.PayoffStatus == "Paid" ? "text-success" : "text-warning")">
                                <td><strong>Balance Due:</strong></td>
                                <td><strong>$@Model.Balance</strong></td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>

    @if (Model.PayoffStatus == "Pending")
    {
        <div class="alert alert-danger" role="alert">
            <strong>Payment Pending:</strong> This order requires payment. Total amount due: $@Model.FinalAmount. 
            <a asp-action="EditOrder" asp-route-id="@Model.OrderId" class="alert-link">Click here to process payment</a>.
        </div>
    }
    else if (Model.PayoffStatus == "Partial")
    {
        <div class="alert alert-warning" role="alert">
            <strong>Payment Required:</strong> This order has a remaining balance of $@Model.Balance. 
            <a asp-action="EditOrder" asp-route-id="@Model.OrderId" class="alert-link">Click here to update payment</a>.
        </div>
    }
    else if (Model.PayoffStatus == "Paid")
    {
        <div class="alert alert-success" role="alert">
            <strong>Payment Complete:</strong> This order has been fully paid.
        </div>
    }
</div>
<style>
    .card-header h4 {
        margin: 0;
        color: #495057;
    }
    .badge {
        font-size: 0.9em;
    }
    .table-borderless td {
        border: none;
        padding: 0.25rem 0.5rem;
    }
    .alert-link {
        font-weight: bold;
    }
</style>

<script>
    // When printing, duplicate the order content side-by-side and hide the original.
    (function() {
        const root = document.getElementById('order-root');
        if (!root) return;

        let wrapper = null;

        function buildDouble() {
            // create wrapper only if not exists
            if (wrapper) return wrapper;
            wrapper = document.createElement('div');
            wrapper.className = 'double-print';
    
            const copy1 = root.cloneNode(true);
            const copy2 = root.cloneNode(true);
            copy1.classList.add('copy');
            copy2.classList.add('copy');

            // add labels to each copy
            const label1 = document.createElement('div');
            label1.className = 'print-copy-label';
            label1.textContent = 'Store Copy';
            copy1.insertBefore(label1, copy1.firstChild);

            const label2 = document.createElement('div');
            label2.className = 'print-copy-label';
            label2.textContent = 'Customer Copy';
            copy2.insertBefore(label2, copy2.firstChild);

            // Add store info to both copies using querySelector (not getElementById on nodes)
            const storeinfo1 = copy1.querySelector('#store-info');
            if (storeinfo1) {
                storeinfo1.innerHTML = `<strong>WOORI OPTICAL</strong><br>333 S. Alameda St. #100, Los Angeles, CA 90013<br>(213) 620-0997<br>`;
            }
            
            const storeinfo2 = copy2.querySelector('#store-info');
            if (storeinfo2) {
                storeinfo2.innerHTML = `<strong>WOORI OPTICAL</strong><br>333 S. Alameda St. #100, Los Angeles, CA 90013<br>(213) 620-0997<br>`;
            }

            // remove print script from copies to avoid recursion
            const scripts1 = copy1.querySelectorAll('script');
            scripts1.forEach(s => s.remove());
            const scripts2 = copy2.querySelectorAll('script');
            scripts2.forEach(s => s.remove());

            wrapper.appendChild(copy1);
            wrapper.appendChild(copy2);

            // insert wrapper after root
            root.parentNode.insertBefore(wrapper, root.nextSibling);
            return wrapper;
        }

        function beforePrint() {
            buildDouble();
            // hide original content for print
            root.classList.add('original');
        }

        function afterPrint() {
            // remove wrapper and show original again
            if (wrapper && wrapper.parentNode) wrapper.parentNode.removeChild(wrapper);
            wrapper = null;
            root.classList.remove('original');
        }

        window.addEventListener('beforeprint', beforePrint);
        window.addEventListener('afterprint', afterPrint);

        // Also handle programmatic print (some browsers don't fire beforeprint reliably)
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                // likely printing started
            } else {
                // returned from print
                afterPrint();
            }
        });
    })();
</script>
